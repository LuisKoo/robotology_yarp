/*
 * SPDX-FileCopyrightText: 2006-2021 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Autogenerated by Thrift Compiler (0.14.1-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#include <yarp/dev/BatteryData.h>

namespace yarp::dev {

// Constructor with field values
BatteryData::BatteryData(const double charge,
                         const double voltage,
                         const double current,
                         const double temperature,
                         const std::int32_t status) :
        WirePortable(),
        charge(charge),
        voltage(voltage),
        current(current),
        temperature(temperature),
        status(status)
{
}

// Read structure on a Wire
bool BatteryData::read(yarp::os::idl::WireReader& reader)
{
    if (!read_charge(reader)) {
        return false;
    }
    if (!read_voltage(reader)) {
        return false;
    }
    if (!read_current(reader)) {
        return false;
    }
    if (!read_temperature(reader)) {
        return false;
    }
    if (!read_status(reader)) {
        return false;
    }
    if (reader.isError()) {
        return false;
    }
    return true;
}

// Read structure on a Connection
bool BatteryData::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader(5)) {
        return false;
    }
    if (!read(reader)) {
        return false;
    }
    return true;
}

// Write structure on a Wire
bool BatteryData::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!write_charge(writer)) {
        return false;
    }
    if (!write_voltage(writer)) {
        return false;
    }
    if (!write_current(writer)) {
        return false;
    }
    if (!write_temperature(writer)) {
        return false;
    }
    if (!write_status(writer)) {
        return false;
    }
    if (writer.isError()) {
        return false;
    }
    return true;
}

// Write structure on a Connection
bool BatteryData::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(5)) {
        return false;
    }
    if (!write(writer)) {
        return false;
    }
    return true;
}

// Convert to a printable string
std::string BatteryData::toString() const
{
    yarp::os::Bottle b;
    if (!yarp::os::Portable::copyPortable(*this, b)) {
        return {};
    }
    return b.toString();
}

// read charge field
bool BatteryData::read_charge(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(charge)) {
        reader.fail();
        return false;
    }
    return true;
}

// write charge field
bool BatteryData::write_charge(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(charge)) {
        return false;
    }
    return true;
}

// read (nested) charge field
bool BatteryData::nested_read_charge(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(charge)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) charge field
bool BatteryData::nested_write_charge(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(charge)) {
        return false;
    }
    return true;
}

// read voltage field
bool BatteryData::read_voltage(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(voltage)) {
        reader.fail();
        return false;
    }
    return true;
}

// write voltage field
bool BatteryData::write_voltage(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(voltage)) {
        return false;
    }
    return true;
}

// read (nested) voltage field
bool BatteryData::nested_read_voltage(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(voltage)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) voltage field
bool BatteryData::nested_write_voltage(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(voltage)) {
        return false;
    }
    return true;
}

// read current field
bool BatteryData::read_current(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(current)) {
        reader.fail();
        return false;
    }
    return true;
}

// write current field
bool BatteryData::write_current(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(current)) {
        return false;
    }
    return true;
}

// read (nested) current field
bool BatteryData::nested_read_current(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(current)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) current field
bool BatteryData::nested_write_current(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(current)) {
        return false;
    }
    return true;
}

// read temperature field
bool BatteryData::read_temperature(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(temperature)) {
        reader.fail();
        return false;
    }
    return true;
}

// write temperature field
bool BatteryData::write_temperature(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(temperature)) {
        return false;
    }
    return true;
}

// read (nested) temperature field
bool BatteryData::nested_read_temperature(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(temperature)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) temperature field
bool BatteryData::nested_write_temperature(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(temperature)) {
        return false;
    }
    return true;
}

// read status field
bool BatteryData::read_status(yarp::os::idl::WireReader& reader)
{
    if (!reader.readI32(status)) {
        status = 3;
    }
    return true;
}

// write status field
bool BatteryData::write_status(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeI32(status)) {
        return false;
    }
    return true;
}

// read (nested) status field
bool BatteryData::nested_read_status(yarp::os::idl::WireReader& reader)
{
    if (!reader.readI32(status)) {
        status = 3;
    }
    return true;
}

// write (nested) status field
bool BatteryData::nested_write_status(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeI32(status)) {
        return false;
    }
    return true;
}

} // namespace yarp::dev
