/*
 * SPDX-FileCopyrightText: 2006-2021 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Autogenerated by Thrift Compiler (0.14.1-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#ifndef YARP_THRIFT_GENERATOR_STRUCT_BATTERYDATA_H
#define YARP_THRIFT_GENERATOR_STRUCT_BATTERYDATA_H

#include <yarp/dev/api.h>

#include <yarp/os/Wire.h>
#include <yarp/os/idl/WireTypes.h>

namespace yarp::dev {

class YARP_dev_API BatteryData :
        public yarp::os::idl::WirePortable
{
public:
    // Fields
    /**
     * Battery charge percentage [%]
     */
    double charge{0.0};
    /**
     * Battery Voltage [V]
     */
    double voltage{0.0};
    /**
     * Battery Current [A]
     */
    double current{0.0};
    /**
     * Battery Temperature [degC]
     */
    double temperature{0.0};
    /**
     * the status of the device. See yarp::dev::IRangefinder2D::Device_status. The default value is DEVICE_TIMEOUT.
     */
    std::int32_t status{3};

    // Default constructor
    BatteryData() = default;

    // Constructor with field values
    BatteryData(const double charge,
                const double voltage,
                const double current,
                const double temperature,
                const std::int32_t status);

    // Read structure on a Wire
    bool read(yarp::os::idl::WireReader& reader) override;

    // Read structure on a Connection
    bool read(yarp::os::ConnectionReader& connection) override;

    // Write structure on a Wire
    bool write(const yarp::os::idl::WireWriter& writer) const override;

    // Write structure on a Connection
    bool write(yarp::os::ConnectionWriter& connection) const override;

    // Convert to a printable string
    std::string toString() const;

    // If you want to serialize this class without nesting, use this helper
    typedef yarp::os::idl::Unwrapped<BatteryData> unwrapped;

private:
    // read/write charge field
    bool read_charge(yarp::os::idl::WireReader& reader);
    bool write_charge(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_charge(yarp::os::idl::WireReader& reader);
    bool nested_write_charge(const yarp::os::idl::WireWriter& writer) const;

    // read/write voltage field
    bool read_voltage(yarp::os::idl::WireReader& reader);
    bool write_voltage(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_voltage(yarp::os::idl::WireReader& reader);
    bool nested_write_voltage(const yarp::os::idl::WireWriter& writer) const;

    // read/write current field
    bool read_current(yarp::os::idl::WireReader& reader);
    bool write_current(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_current(yarp::os::idl::WireReader& reader);
    bool nested_write_current(const yarp::os::idl::WireWriter& writer) const;

    // read/write temperature field
    bool read_temperature(yarp::os::idl::WireReader& reader);
    bool write_temperature(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_temperature(yarp::os::idl::WireReader& reader);
    bool nested_write_temperature(const yarp::os::idl::WireWriter& writer) const;

    // read/write status field
    bool read_status(yarp::os::idl::WireReader& reader);
    bool write_status(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_status(yarp::os::idl::WireReader& reader);
    bool nested_write_status(const yarp::os::idl::WireWriter& writer) const;
};

} // namespace yarp::dev

#endif // YARP_THRIFT_GENERATOR_STRUCT_BATTERYDATA_H
