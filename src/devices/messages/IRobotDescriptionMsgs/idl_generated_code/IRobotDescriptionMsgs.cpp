/*
 * SPDX-FileCopyrightText: 2006-2021 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Autogenerated by Thrift Compiler (0.14.1-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#include <yarp/conf/version.h>
#include <IRobotDescriptionMsgs.h>
#include <yarp/os/LogComponent.h>
#include <yarp/os/LogStream.h>

#include <yarp/os/idl/WireTypes.h>

#include <algorithm>

namespace
{
    YARP_LOG_COMPONENT(SERVICE_LOG_COMPONENT, "IRobotDescriptionMsgs")
}

//IRobotDescriptionMsgs_getRemoteProtocolVersion_helper declaration
class IRobotDescriptionMsgs_getRemoteProtocolVersion_helper :
public yarp::os::Portable
{
public:
    IRobotDescriptionMsgs_getRemoteProtocolVersion_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    yarp::os::ApplicationNetworkProtocolVersion helper_proto;
};

bool IRobotDescriptionMsgs_getRemoteProtocolVersion_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(1)) {
        return false;
    }
    if (!writer.writeString("getRemoteProtocolVersion")) {
        return false;
    }
    return true;
}

bool IRobotDescriptionMsgs_getRemoteProtocolVersion_helper ::read(yarp::os::ConnectionReader & connection)
 {
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }

    if (!helper_proto.read(connection)) {
        reader.fail();
        return false;
    }
    return true;
}

//ProtocolVersion, client side
yarp::os::ApplicationNetworkProtocolVersion IRobotDescriptionMsgs::getRemoteProtocolVersion()
 {
    if(!yarp().canWrite()) {
        yError(" Missing server method IRobotDescriptionMsgs::getRemoteProtocolVersion");
    }
    IRobotDescriptionMsgs_getRemoteProtocolVersion_helper helper{};
    bool ok = yarp().write(helper, helper);
    if (ok) {
        return helper.helper_proto;}
    else {
        yarp::os::ApplicationNetworkProtocolVersion failureproto;
        return failureproto;}
}

//ProtocolVersion, client side
bool IRobotDescriptionMsgs::checkProtocolVersion()
 {
        auto locproto = this->getLocalProtocolVersion();
        auto remproto = this->getRemoteProtocolVersion();
        if (remproto.protocol_version != locproto.protocol_version)
        {
            yCError(SERVICE_LOG_COMPONENT) << "Invalid communication protocol.";
            yCError(SERVICE_LOG_COMPONENT) << "Local Protocol Version: " << locproto.toString();
            yCError(SERVICE_LOG_COMPONENT) << "Remote Protocol Version: " << remproto.toString();
            return false;
        }
        return true;
}

//ProtocolVersion, server side
yarp::os::ApplicationNetworkProtocolVersion IRobotDescriptionMsgs::getLocalProtocolVersion()
{
    yarp::os::ApplicationNetworkProtocolVersion myproto;
    //myproto.protocol_version using default value = 0
    //to change this value add the following line to the .thrift file:
    //const i16 protocol_version = <your_number_here>
    myproto.protocol_version = 0;
    myproto.yarp_major = YARP_VERSION_MAJOR;
    myproto.yarp_minor = YARP_VERSION_MINOR;
    myproto.yarp_patch = YARP_VERSION_PATCH;
    return myproto;
}

// getAllDevicesRPC helper class declaration
class IRobotDescriptionMsgs_getAllDevicesRPC_helper :
        public yarp::os::Portable
{
public:
    IRobotDescriptionMsgs_getAllDevicesRPC_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        return_getAllDevices return_helper{};
    };

    using funcptr_t = return_getAllDevices (*)();
    void call(IRobotDescriptionMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"getAllDevicesRPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{1};
    static constexpr size_t s_reply_len{2};
    static constexpr const char* s_prototype{"return_getAllDevices IRobotDescriptionMsgs::getAllDevicesRPC()"};
    static constexpr const char* s_help{""};
};

// getAllDevicesByTypeRPC helper class declaration
class IRobotDescriptionMsgs_getAllDevicesByTypeRPC_helper :
        public yarp::os::Portable
{
public:
    IRobotDescriptionMsgs_getAllDevicesByTypeRPC_helper() = default;
    explicit IRobotDescriptionMsgs_getAllDevicesByTypeRPC_helper(const std::string& type);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const std::string& type);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        std::string type{};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        return_getAllDevicesByType return_helper{};
    };

    using funcptr_t = return_getAllDevicesByType (*)(const std::string&);
    void call(IRobotDescriptionMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"getAllDevicesByTypeRPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{2};
    static constexpr const char* s_prototype{"return_getAllDevicesByType IRobotDescriptionMsgs::getAllDevicesByTypeRPC(const std::string& type)"};
    static constexpr const char* s_help{""};
};

// registerDeviceRPC helper class declaration
class IRobotDescriptionMsgs_registerDeviceRPC_helper :
        public yarp::os::Portable
{
public:
    IRobotDescriptionMsgs_registerDeviceRPC_helper() = default;
    explicit IRobotDescriptionMsgs_registerDeviceRPC_helper(const yarp::dev::DeviceDescription& dev);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const yarp::dev::DeviceDescription& dev);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        yarp::dev::DeviceDescription dev{};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        yarp::dev::ReturnValue return_helper{};
    };

    using funcptr_t = yarp::dev::ReturnValue (*)(const yarp::dev::DeviceDescription&);
    void call(IRobotDescriptionMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"registerDeviceRPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"yarp::dev::ReturnValue IRobotDescriptionMsgs::registerDeviceRPC(const yarp::dev::DeviceDescription& dev)"};
    static constexpr const char* s_help{""};
};

// unregisterDeviceRPC helper class declaration
class IRobotDescriptionMsgs_unregisterDeviceRPC_helper :
        public yarp::os::Portable
{
public:
    IRobotDescriptionMsgs_unregisterDeviceRPC_helper() = default;
    explicit IRobotDescriptionMsgs_unregisterDeviceRPC_helper(const std::string& dev);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const std::string& dev);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        std::string dev{};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        yarp::dev::ReturnValue return_helper{};
    };

    using funcptr_t = yarp::dev::ReturnValue (*)(const std::string&);
    void call(IRobotDescriptionMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"unregisterDeviceRPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"yarp::dev::ReturnValue IRobotDescriptionMsgs::unregisterDeviceRPC(const std::string& dev)"};
    static constexpr const char* s_help{""};
};

// unregisterAllRPC helper class declaration
class IRobotDescriptionMsgs_unregisterAllRPC_helper :
        public yarp::os::Portable
{
public:
    IRobotDescriptionMsgs_unregisterAllRPC_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        yarp::dev::ReturnValue return_helper{};
    };

    using funcptr_t = yarp::dev::ReturnValue (*)();
    void call(IRobotDescriptionMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"unregisterAllRPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{1};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"yarp::dev::ReturnValue IRobotDescriptionMsgs::unregisterAllRPC()"};
    static constexpr const char* s_help{""};
};

// getAllDevicesRPC helper class implementation
bool IRobotDescriptionMsgs_getAllDevicesRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool IRobotDescriptionMsgs_getAllDevicesRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

bool IRobotDescriptionMsgs_getAllDevicesRPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool IRobotDescriptionMsgs_getAllDevicesRPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool IRobotDescriptionMsgs_getAllDevicesRPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool IRobotDescriptionMsgs_getAllDevicesRPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool IRobotDescriptionMsgs_getAllDevicesRPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool IRobotDescriptionMsgs_getAllDevicesRPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool IRobotDescriptionMsgs_getAllDevicesRPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool IRobotDescriptionMsgs_getAllDevicesRPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool IRobotDescriptionMsgs_getAllDevicesRPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool IRobotDescriptionMsgs_getAllDevicesRPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool IRobotDescriptionMsgs_getAllDevicesRPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool IRobotDescriptionMsgs_getAllDevicesRPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void IRobotDescriptionMsgs_getAllDevicesRPC_helper::call(IRobotDescriptionMsgs* ptr)
{
    reply.return_helper = ptr->getAllDevicesRPC();
}

// getAllDevicesByTypeRPC helper class implementation
IRobotDescriptionMsgs_getAllDevicesByTypeRPC_helper::IRobotDescriptionMsgs_getAllDevicesByTypeRPC_helper(const std::string& type) :
        cmd{type}
{
}

bool IRobotDescriptionMsgs_getAllDevicesByTypeRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool IRobotDescriptionMsgs_getAllDevicesByTypeRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

IRobotDescriptionMsgs_getAllDevicesByTypeRPC_helper::Command::Command(const std::string& type) :
        type{type}
{
}

bool IRobotDescriptionMsgs_getAllDevicesByTypeRPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool IRobotDescriptionMsgs_getAllDevicesByTypeRPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool IRobotDescriptionMsgs_getAllDevicesByTypeRPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool IRobotDescriptionMsgs_getAllDevicesByTypeRPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool IRobotDescriptionMsgs_getAllDevicesByTypeRPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeString(type)) {
        return false;
    }
    return true;
}

bool IRobotDescriptionMsgs_getAllDevicesByTypeRPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool IRobotDescriptionMsgs_getAllDevicesByTypeRPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool IRobotDescriptionMsgs_getAllDevicesByTypeRPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(type)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool IRobotDescriptionMsgs_getAllDevicesByTypeRPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool IRobotDescriptionMsgs_getAllDevicesByTypeRPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool IRobotDescriptionMsgs_getAllDevicesByTypeRPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool IRobotDescriptionMsgs_getAllDevicesByTypeRPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void IRobotDescriptionMsgs_getAllDevicesByTypeRPC_helper::call(IRobotDescriptionMsgs* ptr)
{
    reply.return_helper = ptr->getAllDevicesByTypeRPC(cmd.type);
}

// registerDeviceRPC helper class implementation
IRobotDescriptionMsgs_registerDeviceRPC_helper::IRobotDescriptionMsgs_registerDeviceRPC_helper(const yarp::dev::DeviceDescription& dev) :
        cmd{dev}
{
}

bool IRobotDescriptionMsgs_registerDeviceRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool IRobotDescriptionMsgs_registerDeviceRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

IRobotDescriptionMsgs_registerDeviceRPC_helper::Command::Command(const yarp::dev::DeviceDescription& dev) :
        dev{dev}
{
}

bool IRobotDescriptionMsgs_registerDeviceRPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool IRobotDescriptionMsgs_registerDeviceRPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool IRobotDescriptionMsgs_registerDeviceRPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool IRobotDescriptionMsgs_registerDeviceRPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool IRobotDescriptionMsgs_registerDeviceRPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeNested(dev)) {
        return false;
    }
    return true;
}

bool IRobotDescriptionMsgs_registerDeviceRPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool IRobotDescriptionMsgs_registerDeviceRPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool IRobotDescriptionMsgs_registerDeviceRPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readNested(dev)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool IRobotDescriptionMsgs_registerDeviceRPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool IRobotDescriptionMsgs_registerDeviceRPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool IRobotDescriptionMsgs_registerDeviceRPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool IRobotDescriptionMsgs_registerDeviceRPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void IRobotDescriptionMsgs_registerDeviceRPC_helper::call(IRobotDescriptionMsgs* ptr)
{
    reply.return_helper = ptr->registerDeviceRPC(cmd.dev);
}

// unregisterDeviceRPC helper class implementation
IRobotDescriptionMsgs_unregisterDeviceRPC_helper::IRobotDescriptionMsgs_unregisterDeviceRPC_helper(const std::string& dev) :
        cmd{dev}
{
}

bool IRobotDescriptionMsgs_unregisterDeviceRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool IRobotDescriptionMsgs_unregisterDeviceRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

IRobotDescriptionMsgs_unregisterDeviceRPC_helper::Command::Command(const std::string& dev) :
        dev{dev}
{
}

bool IRobotDescriptionMsgs_unregisterDeviceRPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool IRobotDescriptionMsgs_unregisterDeviceRPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool IRobotDescriptionMsgs_unregisterDeviceRPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool IRobotDescriptionMsgs_unregisterDeviceRPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool IRobotDescriptionMsgs_unregisterDeviceRPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeString(dev)) {
        return false;
    }
    return true;
}

bool IRobotDescriptionMsgs_unregisterDeviceRPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool IRobotDescriptionMsgs_unregisterDeviceRPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool IRobotDescriptionMsgs_unregisterDeviceRPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(dev)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool IRobotDescriptionMsgs_unregisterDeviceRPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool IRobotDescriptionMsgs_unregisterDeviceRPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool IRobotDescriptionMsgs_unregisterDeviceRPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool IRobotDescriptionMsgs_unregisterDeviceRPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void IRobotDescriptionMsgs_unregisterDeviceRPC_helper::call(IRobotDescriptionMsgs* ptr)
{
    reply.return_helper = ptr->unregisterDeviceRPC(cmd.dev);
}

// unregisterAllRPC helper class implementation
bool IRobotDescriptionMsgs_unregisterAllRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool IRobotDescriptionMsgs_unregisterAllRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

bool IRobotDescriptionMsgs_unregisterAllRPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool IRobotDescriptionMsgs_unregisterAllRPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool IRobotDescriptionMsgs_unregisterAllRPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool IRobotDescriptionMsgs_unregisterAllRPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool IRobotDescriptionMsgs_unregisterAllRPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool IRobotDescriptionMsgs_unregisterAllRPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool IRobotDescriptionMsgs_unregisterAllRPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool IRobotDescriptionMsgs_unregisterAllRPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool IRobotDescriptionMsgs_unregisterAllRPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool IRobotDescriptionMsgs_unregisterAllRPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool IRobotDescriptionMsgs_unregisterAllRPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool IRobotDescriptionMsgs_unregisterAllRPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void IRobotDescriptionMsgs_unregisterAllRPC_helper::call(IRobotDescriptionMsgs* ptr)
{
    reply.return_helper = ptr->unregisterAllRPC();
}

// Constructor
IRobotDescriptionMsgs::IRobotDescriptionMsgs()
{
    yarp().setOwner(*this);
}

return_getAllDevices IRobotDescriptionMsgs::getAllDevicesRPC()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", IRobotDescriptionMsgs_getAllDevicesRPC_helper::s_prototype);
    }
    IRobotDescriptionMsgs_getAllDevicesRPC_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : return_getAllDevices{};
}

return_getAllDevicesByType IRobotDescriptionMsgs::getAllDevicesByTypeRPC(const std::string& type)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", IRobotDescriptionMsgs_getAllDevicesByTypeRPC_helper::s_prototype);
    }
    IRobotDescriptionMsgs_getAllDevicesByTypeRPC_helper helper{type};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : return_getAllDevicesByType{};
}

yarp::dev::ReturnValue IRobotDescriptionMsgs::registerDeviceRPC(const yarp::dev::DeviceDescription& dev)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", IRobotDescriptionMsgs_registerDeviceRPC_helper::s_prototype);
    }
    IRobotDescriptionMsgs_registerDeviceRPC_helper helper{dev};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : yarp::dev::ReturnValue{};
}

yarp::dev::ReturnValue IRobotDescriptionMsgs::unregisterDeviceRPC(const std::string& dev)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", IRobotDescriptionMsgs_unregisterDeviceRPC_helper::s_prototype);
    }
    IRobotDescriptionMsgs_unregisterDeviceRPC_helper helper{dev};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : yarp::dev::ReturnValue{};
}

yarp::dev::ReturnValue IRobotDescriptionMsgs::unregisterAllRPC()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", IRobotDescriptionMsgs_unregisterAllRPC_helper::s_prototype);
    }
    IRobotDescriptionMsgs_unregisterAllRPC_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : yarp::dev::ReturnValue{};
}

// help method
std::vector<std::string> IRobotDescriptionMsgs::help(const std::string& functionName)
{
    bool showAll = (functionName == "--all");
    std::vector<std::string> helpString;
    if (showAll) {
        helpString.emplace_back("*** Available commands:");
        helpString.emplace_back(IRobotDescriptionMsgs_getAllDevicesRPC_helper::s_tag);
        helpString.emplace_back(IRobotDescriptionMsgs_getAllDevicesByTypeRPC_helper::s_tag);
        helpString.emplace_back(IRobotDescriptionMsgs_registerDeviceRPC_helper::s_tag);
        helpString.emplace_back(IRobotDescriptionMsgs_unregisterDeviceRPC_helper::s_tag);
        helpString.emplace_back(IRobotDescriptionMsgs_unregisterAllRPC_helper::s_tag);
        helpString.emplace_back("help");
    } else {
        if (functionName == IRobotDescriptionMsgs_getAllDevicesRPC_helper::s_tag) {
            helpString.emplace_back(IRobotDescriptionMsgs_getAllDevicesRPC_helper::s_prototype);
        }
        if (functionName == IRobotDescriptionMsgs_getAllDevicesByTypeRPC_helper::s_tag) {
            helpString.emplace_back(IRobotDescriptionMsgs_getAllDevicesByTypeRPC_helper::s_prototype);
        }
        if (functionName == IRobotDescriptionMsgs_registerDeviceRPC_helper::s_tag) {
            helpString.emplace_back(IRobotDescriptionMsgs_registerDeviceRPC_helper::s_prototype);
        }
        if (functionName == IRobotDescriptionMsgs_unregisterDeviceRPC_helper::s_tag) {
            helpString.emplace_back(IRobotDescriptionMsgs_unregisterDeviceRPC_helper::s_prototype);
        }
        if (functionName == IRobotDescriptionMsgs_unregisterAllRPC_helper::s_tag) {
            helpString.emplace_back(IRobotDescriptionMsgs_unregisterAllRPC_helper::s_prototype);
        }
        if (functionName == "help") {
            helpString.emplace_back("std::vector<std::string> help(const std::string& functionName = \"--all\")");
            helpString.emplace_back("Return list of available commands, or help message for a specific function");
            helpString.emplace_back("@param functionName name of command for which to get a detailed description. If none or '--all' is provided, print list of available commands");
            helpString.emplace_back("@return list of strings (one string per line)");
        }
    }
    if (helpString.empty()) {
        helpString.emplace_back("Command not found");
    }
    return helpString;
}

// read from ConnectionReader
bool IRobotDescriptionMsgs::read(yarp::os::ConnectionReader& connection)
{
    constexpr size_t max_tag_len = 1;
    size_t tag_len = 1;

    yarp::os::idl::WireReader reader(connection);
    reader.expectAccept();
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }

    std::string tag = reader.readTag(1);
    bool direct = (tag == "__direct__");
    if (direct) {
        tag = reader.readTag(1);
    }
    while (tag_len <= max_tag_len && !reader.isError()) {
        if(tag == "getRemoteProtocolVersion") {
            if (!reader.noMore()) {
                yError("Reader invalid protocol?! %s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                reader.fail();
                return false;
            }

            auto proto = getLocalProtocolVersion();

            yarp::os::idl::WireWriter writer(reader);
           if (!writer.writeListHeader(1)) {
                yWarning("Writer invalid protocol?! %s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
               return false;}
            if (!writer.write(proto)) {
                yWarning("Writer invalid protocol?! %s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == IRobotDescriptionMsgs_getAllDevicesRPC_helper::s_tag) {
            IRobotDescriptionMsgs_getAllDevicesRPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == IRobotDescriptionMsgs_getAllDevicesByTypeRPC_helper::s_tag) {
            IRobotDescriptionMsgs_getAllDevicesByTypeRPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == IRobotDescriptionMsgs_registerDeviceRPC_helper::s_tag) {
            IRobotDescriptionMsgs_registerDeviceRPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == IRobotDescriptionMsgs_unregisterDeviceRPC_helper::s_tag) {
            IRobotDescriptionMsgs_unregisterDeviceRPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == IRobotDescriptionMsgs_unregisterAllRPC_helper::s_tag) {
            IRobotDescriptionMsgs_unregisterAllRPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == "help") {
            std::string functionName;
            if (!reader.readString(functionName)) {
                functionName = "--all";
            }
            auto help_strings = help(functionName);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(2)) {
                    return false;
                }
                if (!writer.writeTag("many", 1, 0)) {
                    return false;
                }
                if (!writer.writeListBegin(0, help_strings.size())) {
                    return false;
                }
                for (const auto& help_string : help_strings) {
                    if (!writer.writeString(help_string)) {
                        return false;
                    }
                }
                if (!writer.writeListEnd()) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (reader.noMore()) {
            reader.fail();
            return false;
        }
        std::string next_tag = reader.readTag(1);
        if (next_tag.empty()) {
            break;
        }
        tag.append("_").append(next_tag);
        tag_len = std::count(tag.begin(), tag.end(), '_') + 1;
    }
    return false;
}
