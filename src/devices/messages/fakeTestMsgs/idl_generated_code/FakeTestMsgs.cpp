/* t_yarp_generator::generate_service:3630 */
/*
 * SPDX-FileCopyrightText: 2006-2021 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Autogenerated by Thrift Compiler (0.14.1-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#include <FakeTestMsgs.h>

#include <yarp/os/idl/WireTypes.h>

#include <algorithm>

/* t_yarp_generator::generate_service:3718 */
/* t_yarp_generator::generate_service_helper_classes:3766 */
/* t_yarp_generator::generate_service_helper_classes_decl:3783 */
// doSomethingRPC helper class declaration
class FakeTestMsgs_doSomethingRPC_helper :
        public yarp::os::Portable
{
public:
    FakeTestMsgs_doSomethingRPC_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        yarp::dev::ReturnValue return_helper{};
    };

    using funcptr_t = yarp::dev::ReturnValue (*)();
    void call(FakeTestMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"doSomethingRPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{1};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"yarp::dev::ReturnValue FakeTestMsgs::doSomethingRPC()"};
    static constexpr const char* s_help{""};
};

/* t_yarp_generator::generate_service_helper_classes_impl:3929 */
// doSomethingRPC helper class implementation
/* t_yarp_generator::generate_service_helper_classes_impl_write:3995 */
bool FakeTestMsgs_doSomethingRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_read:4043 */
bool FakeTestMsgs_doSomethingRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_connectionwriter:4063 */
bool FakeTestMsgs_doSomethingRPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_connectionreader:4085 */
bool FakeTestMsgs_doSomethingRPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_wirewriter:4115 */
bool FakeTestMsgs_doSomethingRPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!writeArgs(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writetag:4137 */
bool FakeTestMsgs_doSomethingRPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writeargs:4158 */
bool FakeTestMsgs_doSomethingRPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_wirereader:4186 */
bool FakeTestMsgs_doSomethingRPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!readArgs(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readtag:4206 */
bool FakeTestMsgs_doSomethingRPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readargs:4234 */
bool FakeTestMsgs_doSomethingRPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_connectionwriter:4264 */
bool FakeTestMsgs_doSomethingRPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_connectionreader:4285 */
bool FakeTestMsgs_doSomethingRPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_wirewriter:4306 */
bool FakeTestMsgs_doSomethingRPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
/* t_yarp_generator::generate_serialize_field:1137 */
/* t_yarp_generator::generate_serialize_struct:1259 */
        if (!writer.write(return_helper)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_wirereader:4352 */
bool FakeTestMsgs_doSomethingRPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
/* t_yarp_generator::generate_deserialize_field:1404 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
/* t_yarp_generator::generate_deserialize_struct:1559 */
    if (!reader.read(return_helper)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1387 */
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_call:4390 */
void FakeTestMsgs_doSomethingRPC_helper::call(FakeTestMsgs* ptr)
{
    reply.return_helper = ptr->doSomethingRPC();
}

/* t_yarp_generator::generate_service_constructor:4430 */
// Constructor
FakeTestMsgs::FakeTestMsgs()
{
    yarp().setOwner(*this);
}

/* t_yarp_generator::generate_service_method:4455 */
yarp::dev::ReturnValue FakeTestMsgs::doSomethingRPC()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", FakeTestMsgs_doSomethingRPC_helper::s_prototype);
    }
    FakeTestMsgs_doSomethingRPC_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : yarp::dev::ReturnValue{};
}

/* t_yarp_generator::generate_service_help:4508 */
// help method
std::vector<std::string> FakeTestMsgs::help(const std::string& functionName)
{
    bool showAll = (functionName == "--all");
    std::vector<std::string> helpString;
    if (showAll) {
        helpString.emplace_back("*** Available commands:");
        helpString.emplace_back(FakeTestMsgs_doSomethingRPC_helper::s_tag);
        helpString.emplace_back("help");
    } else {
        if (functionName == FakeTestMsgs_doSomethingRPC_helper::s_tag) {
            helpString.emplace_back(FakeTestMsgs_doSomethingRPC_helper::s_prototype);
        }
        if (functionName == "help") {
            helpString.emplace_back("std::vector<std::string> help(const std::string& functionName = \"--all\")");
            helpString.emplace_back("Return list of available commands, or help message for a specific function");
            helpString.emplace_back("@param functionName name of command for which to get a detailed description. If none or '--all' is provided, print list of available commands");
            helpString.emplace_back("@return list of strings (one string per line)");
        }
    }
    if (helpString.empty()) {
        helpString.emplace_back("Command not found");
    }
    return helpString;
}

/* t_yarp_generator::generate_service_read:4590 */
// read from ConnectionReader
bool FakeTestMsgs::read(yarp::os::ConnectionReader& connection)
{
    constexpr size_t max_tag_len = 1;
    size_t tag_len = 1;

    yarp::os::idl::WireReader reader(connection);
    reader.expectAccept();
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }

    std::string tag = reader.readTag(1);
    bool direct = (tag == "__direct__");
    if (direct) {
        tag = reader.readTag(1);
    }
    while (tag_len <= max_tag_len && !reader.isError()) {
        if (tag == FakeTestMsgs_doSomethingRPC_helper::s_tag) {
            FakeTestMsgs_doSomethingRPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == "help") {
            std::string functionName;
            if (!reader.readString(functionName)) {
                functionName = "--all";
            }
            auto help_strings = help(functionName);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(2)) {
                    yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                    return false;
                }
                if (!writer.writeTag("many", 1, 0)) {
                    yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                    return false;
                }
                if (!writer.writeListBegin(0, help_strings.size())) {
                    yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                    return false;
                }
                for (const auto& help_string : help_strings) {
                    if (!writer.writeString(help_string)) {
                        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                        return false;
                    }
                }
                if (!writer.writeListEnd()) {
                    yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (reader.noMore()) {
            reader.fail();
            return false;
        }
        std::string next_tag = reader.readTag(1);
        if (next_tag.empty()) {
            break;
        }
        tag.append("_").append(next_tag);
        tag_len = std::count(tag.begin(), tag.end(), '_') + 1;
    }
    return false;
}
